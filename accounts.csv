"c_id","savings","chequing","creditcard","scenepoints","balance"
1,3000,2000,200,23000,5000
2,4000,2000,300,5467364,6000
3,5000,2000,400,4677,7000
4,6000,2000,500,466476,8000
5,7000,2000,600,3473468,9000
6,8000,2000,700,74364863,10000
7,9000,2000,800,436483,11000
12,2045,7530,308,36703,730
13,20000,34830,46308,36703,737480
14,20000,34830,46308,36703,737480
15,20000,34830,46308,36703,737480





Here's the PostgreSQL code to create the `accounts` table based on your Node.js/Express application structure described earlier:

Table Creation SQL

//Create the database (if it doesn't exist)
CREATE DATABASE test;

//Connect to the database
\c test;

//Create the accounts table
CREATE TABLE IF NOT EXISTS accounts (
    c_id SERIAL PRIMARY KEY,
    savings INTEGER NOT NULL,
    chequing INTEGER NOT NULL,
    creditcard INTEGER NOT NULL,
    scenepoints INTEGER NOT NULL,
    balance INTEGER NOT NULL
);

-- Insert sample data (optional)
INSERT INTO accounts (savings, chequing, creditcard, scenepoints, balance)
VALUES
    (3000, 2000, 200, 23000, 5000),
    (4000, 2000, 300, 5467364, 6000),
    (5000, 2000, 400, 4677, 7000);
```

---

### **Key Features**
1. **Auto-Generated ID**: `c_id SERIAL PRIMARY KEY` ensures automatic increment of the customer ID.
2. **Data Integrity**: All fields are marked `NOT NULL` to enforce required values.
3. **Sample Data**: Optional starter data for testing.

---

### **How to Run**
1. **Using `psql` Command Line**:
   ```bash
   psql -U postgres -h localhost -p 5433 -f schema.sql
   ```
   (Replace `schema.sql` with your filename)

2. **Using PGAdmin (GUI)**:
   - Connect to your PostgreSQL server
   - Open the Query Tool
   - Paste and execute the SQL code

---

### **Verification**
Check the table structure:
```sql
\d accounts
```

Expected output:
```
                                      Table "public.accounts"
   Column    |  Type   | Collation | Nullable |                  Default
-------------+---------+-----------+----------+-------------------------------------------
 c_id        | integer |           | not null | nextval('accounts_c_id_seq'::regclass)
 savings     | integer |           | not null |
 chequing    | integer |           | not null |
 creditcard  | integer |           | not null |
 scenepoints | integer |           | not null |
 balance     | integer |           | not null |
Indexes:
    "accounts_pkey" PRIMARY KEY, btree (c_id)
```

---

### **For Team Collaboration**
1. Commit this SQL file to your GitHub repository as `schema.sql`
2. Add instructions in your `README.md`:
   ```markdown
   ## Database Setup
   1. Create database: 
      ```bash
      createdb test
      ```
   2. Run schema:
      ```bash
      psql -U postgres -d test -f schema.sql
      ```
   ```

This ensures all team members have identical database structures. Let me know if you need to add more tables (e.g., for users, transactions, etc.)!
